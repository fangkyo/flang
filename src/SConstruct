

def generate_lex(source, target, env, for_signature):
  assert len(target) > 0
  if len(target) == 1:
    return "flex -o %s %s" % (target[0], source[0])
  else:
    return "flex --header-file=%s -o %s %s" % (target[0], target[1], source[0])

lex = Builder(generator=generate_lex)

def generate_yacc(source, target, env, for_signature):
  return "bison --defines=%s -o %s %s" % (target[0], target[1], source[0])
yacc = Builder(generator = generate_yacc)

env = Environment(BUILDERS={"Lex": lex, "Yacc" : yacc})
env.Replace(CCFLAGS="-std=c++11", CPPPATH=".")
env.Replace(LIBS=["log4cxx"])
env.Replace(LIBPATH=".")

lex_file = "flang_scanner.l"
lex_cpp  = "flang_scanner.cpp"
lex_cpp = env.Lex(target=[lex_cpp], source=lex_file)

yacc_file = "flang_parser.y"
yacc_cpp  = "flang_parser.cpp"
yacc_h    = "flang_parser.h"
yacc_h, yacc_cpp = env.Yacc(target=[yacc_h, yacc_cpp], source=yacc_file)

srcs = Glob("*.cpp")
lex_obj = env.Object(lex_cpp)
yacc_obj = env.Object(yacc_cpp)

synax_tree_lib = env.Library(
    target = "synax_tree_lib",
    source = Glob("syntax_tree/*.cpp")
)

Alias("synax_tree_lib", synax_tree_lib)

# objs = env.Object(srcs)
# objs.append(lex_obj)
# objs.append(yacc_obj)
#
# obj_map = {}
# for obj in objs:
#   obj_map[str(obj)] = obj
#
# flang = env.Program("flang", objs)
# Default( flang )

