syntax = "proto2";

package flang;

message ASTNodeType {
  enum Type {
    PROGRAM_NODE = 1;
    EMPTY_NODE = 2;
    VAR_DECL_NODE = 3;
    VAR_DECL_FRAGMENT_NODE = 4; // variable declaration fragment node.
    STMT_NODE = 5; // Statement node
    FUNC_NODE = 6;  // Func;tion definition node
    CALL_NODE = 7; // call function node
    CLASS_NODE = 8; // Class definition node
    BLOCK_NODE = 9; // Code block node
    IF_NODE = 10; // If statement node
    WHILE_NODE = 11; // While statement node
    BREAK_NODE = 12; // break statement node
    RETURN_NODE = 13; // Return statement node
    UNARY_EXP_NODE = 14; // Unary expression node
    BINARY_EXP_NODE = 15; // Binary expression node
    ASSIGN_EXP_NODE = 16; // Assignment node
    NEW_EXP_NODE = 17; // New expression node
    PRIMITIVE_NODE = 18; // Primitive node
    INT_VAL_NODE = 19; // Int value node
    STRING_VAL_NODE = 20; // String value node
    FLOAT_VAL_NODE = 21; // Float value node
    DOUBLE_VAL_NODE = 22;
    CHAR_VAL_NODE = 23; // Char value node
    BOOL_VAL_NODE = 24; // Bool value node, 'true' or 'false'
    NAME_NODE = 25; // Name node
    NULL_NODE = 26; // Null node
    SIMPLE_NAME_NODE = 27; // Simple name node
    QUALIFIED_NAME_NODE = 28; // Qualified name node
    PRINT_NODE = 29; // Print node
    VAR_NODE = 30;// Variable node
    INT32_TYPE_NODE = 31;
    INT64_TYPE_NODE = 32;
    FLOAT_TYPE_NODE = 33;
    DOUBLE_TYPE_NODE = 34;
    CHAR_TYPE_NODE = 35;
    STRING_TYPE_NODE = 36;
    BOOL_TYPE_NODE = 37;
    VOID_TYPE_NODE = 38;
    COMPOSITE_TYPE_NODE = 39;
    CLASS_TYPE_NODE = 40;
    ARRAY_TYPE_NODE = 41;
    CONTINUE_NODE = 42;
  }
}
