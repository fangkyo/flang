#ifndef FLANG_SCANNER_H_
#define FLANG_SCANNER_H_

#include <istream>
#include <string>

#if ! defined(yyFlexLexerOnce)
#include <FlexLexer.h>
#endif

// Because we create our own scanner class instead of yyFlexLexer by using
// %option yyclass="FLangScanner" in flang_scanner.l, we should set the
// FlangScanner::yylex() as the declared function for the yylex() implementation
// in the generated file flang_scanner.cpp. The cpp file also provides a dummy
// implementation for yyFlexLexer::yylex() in addition to the one that does the
// real work.
// flang_scanner.cpp:
// int yyFlexLexer::yylex() {
//   // Nothing to do
// }
//
// YY_DECL {
//   // Do the real work
// }
//
#undef YY_DECL
#define YY_DECL \
    int flang::FlangScanner::yylex( \
        FlangParser::semantic_type *yylval, \
        FlangParser::location_type* yylloc)

#include <boost/format.hpp>
#include "exception/exception.h"
#include "front_end/flang_parser.h"

namespace flang {

class IntegerCastError : public Error {
 public:
  IntegerCastError(
      const char* text, const FlangParser::location_type& loc) :
      Error(loc) {
    boost::format fmt(
        "%1% can't be parsed to integer, out of range [%2%, %3%].");
    fmt % text % INT64_MAX % INT64_MAX;
    setMessage(fmt.str());
  }
};

class DoubleCastError : public Error {
 public:
  DoubleCastError(
      const char* text, const FlangParser::location_type& loc) :
      Error(loc) {
    boost::format fmt(
        "%1% can't be parsed to double, out of range [2.2E-308, 1.8E+308].");
    fmt % text;
    setMessage(fmt.str());
  }
};

/**
 * @brief The flang lex scanner which scans the source file and turns it into
 *        tokens.
 * The implementation is generated by flex++. @see flang_scanner.l
 * This class are incorprated with class FlangParser. @see FlangParser
 */
class FlangScanner : public yyFlexLexer{
 public:
  FlangScanner(std::istream *in)
      : yyFlexLexer(in) {}
  /**
   * The scan function which is passed in the value struct given by FlangParser
   * and defined by %union section in flang_parser.y.
   * @param[in] yyval The yylval in C version scanner.
   */
  int yylex(FlangParser::semantic_type* yylval,
            FlangParser::location_type* yylloc);

 private:
};

}  // namespace flang

#endif
