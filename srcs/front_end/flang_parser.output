Terminals unused in grammar

   BOOL_VAL
   OR
   NE
   GE
   LE
   '>'
   '!'
   UMINUS


Grammar

    0 $accept: program $end

    1 program: import_list stmt_list

    2 import_list: import_list import
    3            | %empty

    4 import: IMPORT name
    5       | IMPORT name AS simple_name

    6 stmt_list: stmt_list stmt
    7          | %empty

    8 stmt: expr ';'
    9     | PRINT expr ';'
   10     | return_stmt
   11     | BREAK ';'
   12     | CONTINUE ';'
   13     | var_decl ';'
   14     | if_stmt
   15     | while_stmt
   16     | assignment ';'
   17     | function
   18     | class
   19     | block
   20     | ';'

   21 return_stmt: RETURN ';'
   22            | RETURN expr ';'

   23 block: '{' stmt_list '}'

   24 expr: INT_VAL
   25     | TRUE
   26     | FALSE
   27     | STR_VAL
   28     | CHAR_VAL
   29     | DOUBLE_VAL
   30     | expr '+' expr
   31     | expr '-' expr
   32     | expr '*' expr
   33     | expr '/' expr
   34     | expr '<' expr
   35     | expr AND expr
   36     | expr EQ expr
   37     | '(' expr ')'
   38     | NEW call
   39     | field_access

   40 name: simple_name
   41     | qualified_name

   42 qualified_name: qualified_name '.' simple_name
   43               | simple_name '.' simple_name

   44 simple_name: ID

   45 field_access: expr '.' simple_name
   46             | simple_name

   47 var_decl: var_decl ',' var_decl_fragment
   48         | type var_decl_fragment

   49 var_decl_fragment: ID '=' expr
   50                  | ID

   51 assignment: expr '=' expr

   52 type: INT32_TYPE
   53     | INT64_TYPE
   54     | BOOL_TYPE
   55     | CHAR_TYPE
   56     | STR_TYPE
   57     | DOUBLE_TYPE
   58     | user_def_type

   59 user_def_type: field_access

   60 if_stmt: IF '(' expr ')' stmt ELSE stmt
   61        | IF '(' expr ')' stmt

   62 while_stmt: WHILE '(' expr ')' stmt

   63 function: DEF ID '(' param_decl_list ')' ret_type block
   64         | DEF ID '(' ')' ret_type block

   65 ret_type: type
   66         | %empty

   67 param_decl_list: param_decl_list ',' type ID
   68                | type ID

   69 call: expr '.' simple_name '(' param_list ')'
   70     | simple_name '(' param_list ')'

   71 param_list: param_list ',' expr
   72           | %empty

   73 class: CLASS ID '{' class_body '}'
   74      | CLASS ID ':' name '{' class_body '}'

   75 class_body: class_body class_body_decl
   76           | %empty

   77 class_body_decl: var_decl ';'
   78                | function
   79                | class
   80                | constructor
   81                | destructor

   82 constructor: THIS '(' param_decl_list ')' block

   83 destructor: '~' THIS '(' ')' block


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'(' (40) 37 60 61 62 63 64 69 70 82 83
')' (41) 37 60 61 62 63 64 69 70 82 83
'*' (42) 32
'+' (43) 30
',' (44) 47 67 71
'-' (45) 31
'.' (46) 42 43 45 69
'/' (47) 33
':' (58) 74
';' (59) 8 9 11 12 13 16 20 21 22 77
'<' (60) 34
'=' (61) 49 51
'>' (62)
'{' (123) 23 73 74
'}' (125) 23 73 74
'~' (126) 83
error (256)
INT_VAL (258) 24
CHAR_VAL (259) 28
BOOL_VAL (260)
STR_VAL (261) 27
ID (262) 44 49 50 63 64 67 68 73 74
DOUBLE_VAL (263) 29
WHILE (264) 62
IF (265) 60 61
PRINT (266) 9
BREAK (267) 11
DEF (268) 63 64
CLASS (269) 73 74
RETURN (270) 21 22
THIS (271) 82 83
NEW (272) 38
CONTINUE (273) 12
BOOL_TYPE (274) 54
CHAR_TYPE (275) 55
STR_TYPE (276) 56
INT32_TYPE (277) 52
INT64_TYPE (278) 53
TRUE (279) 25
FALSE (280) 26
DOUBLE_TYPE (281) 57
IMPORT (282) 4 5
AS (283) 5
IFX (284)
ELSE (285) 60
AND (286) 35
OR (287)
EQ (288) 36
NE (289)
GE (290)
LE (291)
UMINUS (292)


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1, on right: 0
import_list (57)
    on left: 2 3, on right: 1 2
import (58)
    on left: 4 5, on right: 2
stmt_list (59)
    on left: 6 7, on right: 1 6 23
stmt (60)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20, on right: 6 60 61
    62
return_stmt (61)
    on left: 21 22, on right: 10
block (62)
    on left: 23, on right: 19 63 64 82 83
expr (63)
    on left: 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39, on right:
    8 9 22 30 31 32 33 34 35 36 37 45 49 51 60 61 62 69 71
name (64)
    on left: 40 41, on right: 4 5 74
qualified_name (65)
    on left: 42 43, on right: 41 42
simple_name (66)
    on left: 44, on right: 5 40 42 43 45 46 69 70
field_access (67)
    on left: 45 46, on right: 39 59
var_decl (68)
    on left: 47 48, on right: 13 47 77
var_decl_fragment (69)
    on left: 49 50, on right: 47 48
assignment (70)
    on left: 51, on right: 16
type (71)
    on left: 52 53 54 55 56 57 58, on right: 48 65 67 68
user_def_type (72)
    on left: 59, on right: 58
if_stmt (73)
    on left: 60 61, on right: 14
while_stmt (74)
    on left: 62, on right: 15
function (75)
    on left: 63 64, on right: 17 78
ret_type (76)
    on left: 65 66, on right: 63 64
param_decl_list (77)
    on left: 67 68, on right: 63 67 82
call (78)
    on left: 69 70, on right: 38
param_list (79)
    on left: 71 72, on right: 69 70 71
class (80)
    on left: 73 74, on right: 18 79
class_body (81)
    on left: 75 76, on right: 73 74 75
class_body_decl (82)
    on left: 77 78 79 80 81, on right: 75
constructor (83)
    on left: 82, on right: 80
destructor (84)
    on left: 83, on right: 81


State 0

    0 $accept: . program $end
    1 program: . import_list stmt_list
    2 import_list: . import_list import
    3            | . %empty

    $default  reduce using rule 3 (import_list)

    program      go to state 1
    import_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: import_list . stmt_list
    2 import_list: import_list . import
    4 import: . IMPORT name
    5       | . IMPORT name AS simple_name
    6 stmt_list: . stmt_list stmt
    7          | . %empty  [$end, INT_VAL, CHAR_VAL, STR_VAL, ID, DOUBLE_VAL, WHILE, IF, PRINT, BREAK, DEF, CLASS, RETURN, NEW, CONTINUE, BOOL_TYPE, CHAR_TYPE, STR_TYPE, INT32_TYPE, INT64_TYPE, TRUE, FALSE, DOUBLE_TYPE, ';', '{', '(']

    IMPORT  shift, and go to state 4

    $default  reduce using rule 7 (stmt_list)

    import     go to state 5
    stmt_list  go to state 6


State 3

    0 $accept: program $end .

    $default  accept


State 4

    4 import: IMPORT . name
    5       | IMPORT . name AS simple_name
   40 name: . simple_name
   41     | . qualified_name
   42 qualified_name: . qualified_name '.' simple_name
   43               | . simple_name '.' simple_name
   44 simple_name: . ID

    ID  shift, and go to state 7

    name            go to state 8
    qualified_name  go to state 9
    simple_name     go to state 10


State 5

    2 import_list: import_list import .

    $default  reduce using rule 2 (import_list)


State 6

    1 program: import_list stmt_list .  [$end]
    6 stmt_list: stmt_list . stmt
    8 stmt: . expr ';'
    9     | . PRINT expr ';'
   10     | . return_stmt
   11     | . BREAK ';'
   12     | . CONTINUE ';'
   13     | . var_decl ';'
   14     | . if_stmt
   15     | . while_stmt
   16     | . assignment ';'
   17     | . function
   18     | . class
   19     | . block
   20     | . ';'
   21 return_stmt: . RETURN ';'
   22            | . RETURN expr ';'
   23 block: . '{' stmt_list '}'
   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   47 var_decl: . var_decl ',' var_decl_fragment
   48         | . type var_decl_fragment
   51 assignment: . expr '=' expr
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   60 if_stmt: . IF '(' expr ')' stmt ELSE stmt
   61        | . IF '(' expr ')' stmt
   62 while_stmt: . WHILE '(' expr ')' stmt
   63 function: . DEF ID '(' param_decl_list ')' ret_type block
   64         | . DEF ID '(' ')' ret_type block
   73 class: . CLASS ID '{' class_body '}'
   74      | . CLASS ID ':' name '{' class_body '}'

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    WHILE        shift, and go to state 15
    IF           shift, and go to state 16
    PRINT        shift, and go to state 17
    BREAK        shift, and go to state 18
    DEF          shift, and go to state 19
    CLASS        shift, and go to state 20
    RETURN       shift, and go to state 21
    NEW          shift, and go to state 22
    CONTINUE     shift, and go to state 23
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    ';'          shift, and go to state 32
    '{'          shift, and go to state 33
    '('          shift, and go to state 34

    $default  reduce using rule 1 (program)

    stmt           go to state 35
    return_stmt    go to state 36
    block          go to state 37
    expr           go to state 38
    simple_name    go to state 39
    field_access   go to state 40
    var_decl       go to state 41
    assignment     go to state 42
    type           go to state 43
    user_def_type  go to state 44
    if_stmt        go to state 45
    while_stmt     go to state 46
    function       go to state 47
    class          go to state 48


State 7

   44 simple_name: ID .

    $default  reduce using rule 44 (simple_name)


State 8

    4 import: IMPORT name .  [$end, INT_VAL, CHAR_VAL, STR_VAL, ID, DOUBLE_VAL, WHILE, IF, PRINT, BREAK, DEF, CLASS, RETURN, NEW, CONTINUE, BOOL_TYPE, CHAR_TYPE, STR_TYPE, INT32_TYPE, INT64_TYPE, TRUE, FALSE, DOUBLE_TYPE, IMPORT, ';', '{', '(']
    5       | IMPORT name . AS simple_name

    AS  shift, and go to state 49

    $default  reduce using rule 4 (import)


State 9

   41 name: qualified_name .  [$end, INT_VAL, CHAR_VAL, STR_VAL, ID, DOUBLE_VAL, WHILE, IF, PRINT, BREAK, DEF, CLASS, RETURN, NEW, CONTINUE, BOOL_TYPE, CHAR_TYPE, STR_TYPE, INT32_TYPE, INT64_TYPE, TRUE, FALSE, DOUBLE_TYPE, IMPORT, AS, ';', '{', '(']
   42 qualified_name: qualified_name . '.' simple_name

    '.'  shift, and go to state 50

    $default  reduce using rule 41 (name)


State 10

   40 name: simple_name .  [$end, INT_VAL, CHAR_VAL, STR_VAL, ID, DOUBLE_VAL, WHILE, IF, PRINT, BREAK, DEF, CLASS, RETURN, NEW, CONTINUE, BOOL_TYPE, CHAR_TYPE, STR_TYPE, INT32_TYPE, INT64_TYPE, TRUE, FALSE, DOUBLE_TYPE, IMPORT, AS, ';', '{', '(']
   43 qualified_name: simple_name . '.' simple_name

    '.'  shift, and go to state 51

    $default  reduce using rule 40 (name)


State 11

   24 expr: INT_VAL .

    $default  reduce using rule 24 (expr)


State 12

   28 expr: CHAR_VAL .

    $default  reduce using rule 28 (expr)


State 13

   27 expr: STR_VAL .

    $default  reduce using rule 27 (expr)


State 14

   29 expr: DOUBLE_VAL .

    $default  reduce using rule 29 (expr)


State 15

   62 while_stmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 52


State 16

   60 if_stmt: IF . '(' expr ')' stmt ELSE stmt
   61        | IF . '(' expr ')' stmt

    '('  shift, and go to state 53


State 17

    9 stmt: PRINT . expr ';'
   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 54
    simple_name   go to state 39
    field_access  go to state 55


State 18

   11 stmt: BREAK . ';'

    ';'  shift, and go to state 56


State 19

   63 function: DEF . ID '(' param_decl_list ')' ret_type block
   64         | DEF . ID '(' ')' ret_type block

    ID  shift, and go to state 57


State 20

   73 class: CLASS . ID '{' class_body '}'
   74      | CLASS . ID ':' name '{' class_body '}'

    ID  shift, and go to state 58


State 21

   21 return_stmt: RETURN . ';'
   22            | RETURN . expr ';'
   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    ';'         shift, and go to state 59
    '('         shift, and go to state 34

    expr          go to state 60
    simple_name   go to state 39
    field_access  go to state 55


State 22

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   38     | NEW . call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   69 call: . expr '.' simple_name '(' param_list ')'
   70     | . simple_name '(' param_list ')'

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 61
    simple_name   go to state 62
    field_access  go to state 55
    call          go to state 63


State 23

   12 stmt: CONTINUE . ';'

    ';'  shift, and go to state 64


State 24

   54 type: BOOL_TYPE .

    $default  reduce using rule 54 (type)


State 25

   55 type: CHAR_TYPE .

    $default  reduce using rule 55 (type)


State 26

   56 type: STR_TYPE .

    $default  reduce using rule 56 (type)


State 27

   52 type: INT32_TYPE .

    $default  reduce using rule 52 (type)


State 28

   53 type: INT64_TYPE .

    $default  reduce using rule 53 (type)


State 29

   25 expr: TRUE .

    $default  reduce using rule 25 (expr)


State 30

   26 expr: FALSE .

    $default  reduce using rule 26 (expr)


State 31

   57 type: DOUBLE_TYPE .

    $default  reduce using rule 57 (type)


State 32

   20 stmt: ';' .

    $default  reduce using rule 20 (stmt)


State 33

    6 stmt_list: . stmt_list stmt
    7          | . %empty
   23 block: '{' . stmt_list '}'

    $default  reduce using rule 7 (stmt_list)

    stmt_list  go to state 65


State 34

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   37     | '(' . expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 66
    simple_name   go to state 39
    field_access  go to state 55


State 35

    6 stmt_list: stmt_list stmt .

    $default  reduce using rule 6 (stmt_list)


State 36

   10 stmt: return_stmt .

    $default  reduce using rule 10 (stmt)


State 37

   19 stmt: block .

    $default  reduce using rule 19 (stmt)


State 38

    8 stmt: expr . ';'
   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name
   51 assignment: expr . '=' expr

    '='  shift, and go to state 67
    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75
    ';'  shift, and go to state 76


State 39

   46 field_access: simple_name .

    $default  reduce using rule 46 (field_access)


State 40

   39 expr: field_access .  ['=', AND, EQ, '<', '+', '-', '*', '/', '.', ';']
   59 user_def_type: field_access .  [ID, '{']

    ID        reduce using rule 59 (user_def_type)
    '{'       reduce using rule 59 (user_def_type)
    $default  reduce using rule 39 (expr)


State 41

   13 stmt: var_decl . ';'
   47 var_decl: var_decl . ',' var_decl_fragment

    ';'  shift, and go to state 77
    ','  shift, and go to state 78


State 42

   16 stmt: assignment . ';'

    ';'  shift, and go to state 79


State 43

   48 var_decl: type . var_decl_fragment
   49 var_decl_fragment: . ID '=' expr
   50                  | . ID

    ID  shift, and go to state 80

    var_decl_fragment  go to state 81


State 44

   58 type: user_def_type .

    $default  reduce using rule 58 (type)


State 45

   14 stmt: if_stmt .

    $default  reduce using rule 14 (stmt)


State 46

   15 stmt: while_stmt .

    $default  reduce using rule 15 (stmt)


State 47

   17 stmt: function .

    $default  reduce using rule 17 (stmt)


State 48

   18 stmt: class .

    $default  reduce using rule 18 (stmt)


State 49

    5 import: IMPORT name AS . simple_name
   44 simple_name: . ID

    ID  shift, and go to state 7

    simple_name  go to state 82


State 50

   42 qualified_name: qualified_name '.' . simple_name
   44 simple_name: . ID

    ID  shift, and go to state 7

    simple_name  go to state 83


State 51

   43 qualified_name: simple_name '.' . simple_name
   44 simple_name: . ID

    ID  shift, and go to state 7

    simple_name  go to state 84


State 52

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   62 while_stmt: WHILE '(' . expr ')' stmt

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 85
    simple_name   go to state 39
    field_access  go to state 55


State 53

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   60 if_stmt: IF '(' . expr ')' stmt ELSE stmt
   61        | IF '(' . expr ')' stmt

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 86
    simple_name   go to state 39
    field_access  go to state 55


State 54

    9 stmt: PRINT expr . ';'
   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name

    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75
    ';'  shift, and go to state 87


State 55

   39 expr: field_access .

    $default  reduce using rule 39 (expr)


State 56

   11 stmt: BREAK ';' .

    $default  reduce using rule 11 (stmt)


State 57

   63 function: DEF ID . '(' param_decl_list ')' ret_type block
   64         | DEF ID . '(' ')' ret_type block

    '('  shift, and go to state 88


State 58

   73 class: CLASS ID . '{' class_body '}'
   74      | CLASS ID . ':' name '{' class_body '}'

    '{'  shift, and go to state 89
    ':'  shift, and go to state 90


State 59

   21 return_stmt: RETURN ';' .

    $default  reduce using rule 21 (return_stmt)


State 60

   22 return_stmt: RETURN expr . ';'
   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name

    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75
    ';'  shift, and go to state 91


State 61

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name
   69 call: expr . '.' simple_name '(' param_list ')'

    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 92


State 62

   46 field_access: simple_name .  [AND, EQ, '<', '+', '-', '*', '/', '.']
   70 call: simple_name . '(' param_list ')'

    '('  shift, and go to state 93

    $default  reduce using rule 46 (field_access)


State 63

   38 expr: NEW call .

    $default  reduce using rule 38 (expr)


State 64

   12 stmt: CONTINUE ';' .

    $default  reduce using rule 12 (stmt)


State 65

    6 stmt_list: stmt_list . stmt
    8 stmt: . expr ';'
    9     | . PRINT expr ';'
   10     | . return_stmt
   11     | . BREAK ';'
   12     | . CONTINUE ';'
   13     | . var_decl ';'
   14     | . if_stmt
   15     | . while_stmt
   16     | . assignment ';'
   17     | . function
   18     | . class
   19     | . block
   20     | . ';'
   21 return_stmt: . RETURN ';'
   22            | . RETURN expr ';'
   23 block: . '{' stmt_list '}'
   23      | '{' stmt_list . '}'
   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   47 var_decl: . var_decl ',' var_decl_fragment
   48         | . type var_decl_fragment
   51 assignment: . expr '=' expr
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   60 if_stmt: . IF '(' expr ')' stmt ELSE stmt
   61        | . IF '(' expr ')' stmt
   62 while_stmt: . WHILE '(' expr ')' stmt
   63 function: . DEF ID '(' param_decl_list ')' ret_type block
   64         | . DEF ID '(' ')' ret_type block
   73 class: . CLASS ID '{' class_body '}'
   74      | . CLASS ID ':' name '{' class_body '}'

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    WHILE        shift, and go to state 15
    IF           shift, and go to state 16
    PRINT        shift, and go to state 17
    BREAK        shift, and go to state 18
    DEF          shift, and go to state 19
    CLASS        shift, and go to state 20
    RETURN       shift, and go to state 21
    NEW          shift, and go to state 22
    CONTINUE     shift, and go to state 23
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    ';'          shift, and go to state 32
    '{'          shift, and go to state 33
    '}'          shift, and go to state 94
    '('          shift, and go to state 34

    stmt           go to state 35
    return_stmt    go to state 36
    block          go to state 37
    expr           go to state 38
    simple_name    go to state 39
    field_access   go to state 40
    var_decl       go to state 41
    assignment     go to state 42
    type           go to state 43
    user_def_type  go to state 44
    if_stmt        go to state 45
    while_stmt     go to state 46
    function       go to state 47
    class          go to state 48


State 66

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   37     | '(' expr . ')'
   45 field_access: expr . '.' simple_name

    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75
    ')'  shift, and go to state 95


State 67

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   51 assignment: expr '=' . expr

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 96
    simple_name   go to state 39
    field_access  go to state 55


State 68

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   35     | expr AND . expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 97
    simple_name   go to state 39
    field_access  go to state 55


State 69

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   36     | expr EQ . expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 98
    simple_name   go to state 39
    field_access  go to state 55


State 70

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   34     | expr '<' . expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 99
    simple_name   go to state 39
    field_access  go to state 55


State 71

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   30     | expr '+' . expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 100
    simple_name   go to state 39
    field_access  go to state 55


State 72

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   31     | expr '-' . expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 101
    simple_name   go to state 39
    field_access  go to state 55


State 73

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   32     | expr '*' . expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 102
    simple_name   go to state 39
    field_access  go to state 55


State 74

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   33     | expr '/' . expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 103
    simple_name   go to state 39
    field_access  go to state 55


State 75

   44 simple_name: . ID
   45 field_access: expr '.' . simple_name

    ID  shift, and go to state 7

    simple_name  go to state 104


State 76

    8 stmt: expr ';' .

    $default  reduce using rule 8 (stmt)


State 77

   13 stmt: var_decl ';' .

    $default  reduce using rule 13 (stmt)


State 78

   47 var_decl: var_decl ',' . var_decl_fragment
   49 var_decl_fragment: . ID '=' expr
   50                  | . ID

    ID  shift, and go to state 80

    var_decl_fragment  go to state 105


State 79

   16 stmt: assignment ';' .

    $default  reduce using rule 16 (stmt)


State 80

   49 var_decl_fragment: ID . '=' expr
   50                  | ID .  [';', ',']

    '='  shift, and go to state 106

    $default  reduce using rule 50 (var_decl_fragment)


State 81

   48 var_decl: type var_decl_fragment .

    $default  reduce using rule 48 (var_decl)


State 82

    5 import: IMPORT name AS simple_name .

    $default  reduce using rule 5 (import)


State 83

   42 qualified_name: qualified_name '.' simple_name .

    $default  reduce using rule 42 (qualified_name)


State 84

   43 qualified_name: simple_name '.' simple_name .

    $default  reduce using rule 43 (qualified_name)


State 85

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name
   62 while_stmt: WHILE '(' expr . ')' stmt

    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75
    ')'  shift, and go to state 107


State 86

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name
   60 if_stmt: IF '(' expr . ')' stmt ELSE stmt
   61        | IF '(' expr . ')' stmt

    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75
    ')'  shift, and go to state 108


State 87

    9 stmt: PRINT expr ';' .

    $default  reduce using rule 9 (stmt)


State 88

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   63 function: DEF ID '(' . param_decl_list ')' ret_type block
   64         | DEF ID '(' . ')' ret_type block
   67 param_decl_list: . param_decl_list ',' type ID
   68                | . type ID

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    NEW          shift, and go to state 22
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    '('          shift, and go to state 34
    ')'          shift, and go to state 109

    expr             go to state 110
    simple_name      go to state 39
    field_access     go to state 40
    type             go to state 111
    user_def_type    go to state 44
    param_decl_list  go to state 112


State 89

   73 class: CLASS ID '{' . class_body '}'
   75 class_body: . class_body class_body_decl
   76           | . %empty

    $default  reduce using rule 76 (class_body)

    class_body  go to state 113


State 90

   40 name: . simple_name
   41     | . qualified_name
   42 qualified_name: . qualified_name '.' simple_name
   43               | . simple_name '.' simple_name
   44 simple_name: . ID
   74 class: CLASS ID ':' . name '{' class_body '}'

    ID  shift, and go to state 7

    name            go to state 114
    qualified_name  go to state 9
    simple_name     go to state 10


State 91

   22 return_stmt: RETURN expr ';' .

    $default  reduce using rule 22 (return_stmt)


State 92

   44 simple_name: . ID
   45 field_access: expr '.' . simple_name
   69 call: expr '.' . simple_name '(' param_list ')'

    ID  shift, and go to state 7

    simple_name  go to state 115


State 93

   70 call: simple_name '(' . param_list ')'
   71 param_list: . param_list ',' expr
   72           | . %empty

    $default  reduce using rule 72 (param_list)

    param_list  go to state 116


State 94

   23 block: '{' stmt_list '}' .

    $default  reduce using rule 23 (block)


State 95

   37 expr: '(' expr ')' .

    $default  reduce using rule 37 (expr)


State 96

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name
   51 assignment: expr '=' expr .  [';']

    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75

    $default  reduce using rule 51 (assignment)


State 97

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   35     | expr AND expr .  ['=', AND, ';', ')', ',']
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name

    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75

    $default  reduce using rule 35 (expr)

    Conflict between rule 35 and token AND resolved as reduce (%left AND).
    Conflict between rule 35 and token EQ resolved as shift (AND < EQ).
    Conflict between rule 35 and token '<' resolved as shift (AND < '<').
    Conflict between rule 35 and token '+' resolved as shift (AND < '+').
    Conflict between rule 35 and token '-' resolved as shift (AND < '-').
    Conflict between rule 35 and token '*' resolved as shift (AND < '*').
    Conflict between rule 35 and token '/' resolved as shift (AND < '/').
    Conflict between rule 35 and token '.' resolved as shift (AND < '.').


State 98

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   36     | expr EQ expr .  ['=', AND, EQ, ';', ')', ',']
   45 field_access: expr . '.' simple_name

    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75

    $default  reduce using rule 36 (expr)

    Conflict between rule 36 and token AND resolved as reduce (AND < EQ).
    Conflict between rule 36 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 36 and token '<' resolved as shift (EQ < '<').
    Conflict between rule 36 and token '+' resolved as shift (EQ < '+').
    Conflict between rule 36 and token '-' resolved as shift (EQ < '-').
    Conflict between rule 36 and token '*' resolved as shift (EQ < '*').
    Conflict between rule 36 and token '/' resolved as shift (EQ < '/').
    Conflict between rule 36 and token '.' resolved as shift (EQ < '.').


State 99

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   34     | expr '<' expr .  ['=', AND, EQ, '<', ';', ')', ',']
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75

    $default  reduce using rule 34 (expr)

    Conflict between rule 34 and token AND resolved as reduce (AND < '<').
    Conflict between rule 34 and token EQ resolved as reduce (EQ < '<').
    Conflict between rule 34 and token '<' resolved as reduce (%left '<').
    Conflict between rule 34 and token '+' resolved as shift ('<' < '+').
    Conflict between rule 34 and token '-' resolved as shift ('<' < '-').
    Conflict between rule 34 and token '*' resolved as shift ('<' < '*').
    Conflict between rule 34 and token '/' resolved as shift ('<' < '/').
    Conflict between rule 34 and token '.' resolved as shift ('<' < '.').


State 100

   30 expr: expr . '+' expr
   30     | expr '+' expr .  ['=', AND, EQ, '<', '+', '-', ';', ')', ',']
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75

    $default  reduce using rule 30 (expr)

    Conflict between rule 30 and token AND resolved as reduce (AND < '+').
    Conflict between rule 30 and token EQ resolved as reduce (EQ < '+').
    Conflict between rule 30 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 30 and token '+' resolved as reduce (%left '+').
    Conflict between rule 30 and token '-' resolved as reduce (%left '-').
    Conflict between rule 30 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 30 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 30 and token '.' resolved as shift ('+' < '.').


State 101

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   31     | expr '-' expr .  ['=', AND, EQ, '<', '+', '-', ';', ')', ',']
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75

    $default  reduce using rule 31 (expr)

    Conflict between rule 31 and token AND resolved as reduce (AND < '-').
    Conflict between rule 31 and token EQ resolved as reduce (EQ < '-').
    Conflict between rule 31 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 31 and token '+' resolved as reduce (%left '+').
    Conflict between rule 31 and token '-' resolved as reduce (%left '-').
    Conflict between rule 31 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 31 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 31 and token '.' resolved as shift ('-' < '.').


State 102

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   32     | expr '*' expr .  ['=', AND, EQ, '<', '+', '-', '*', '/', ';', ')', ',']
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name

    '.'  shift, and go to state 75

    $default  reduce using rule 32 (expr)

    Conflict between rule 32 and token AND resolved as reduce (AND < '*').
    Conflict between rule 32 and token EQ resolved as reduce (EQ < '*').
    Conflict between rule 32 and token '<' resolved as reduce ('<' < '*').
    Conflict between rule 32 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 32 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 32 and token '*' resolved as reduce (%left '*').
    Conflict between rule 32 and token '/' resolved as reduce (%left '/').
    Conflict between rule 32 and token '.' resolved as shift ('*' < '.').


State 103

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   33     | expr '/' expr .  ['=', AND, EQ, '<', '+', '-', '*', '/', ';', ')', ',']
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name

    '.'  shift, and go to state 75

    $default  reduce using rule 33 (expr)

    Conflict between rule 33 and token AND resolved as reduce (AND < '/').
    Conflict between rule 33 and token EQ resolved as reduce (EQ < '/').
    Conflict between rule 33 and token '<' resolved as reduce ('<' < '/').
    Conflict between rule 33 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 33 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 33 and token '*' resolved as reduce (%left '*').
    Conflict between rule 33 and token '/' resolved as reduce (%left '/').
    Conflict between rule 33 and token '.' resolved as shift ('/' < '.').


State 104

   45 field_access: expr '.' simple_name .

    $default  reduce using rule 45 (field_access)


State 105

   47 var_decl: var_decl ',' var_decl_fragment .

    $default  reduce using rule 47 (var_decl)


State 106

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   49 var_decl_fragment: ID '=' . expr

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 117
    simple_name   go to state 39
    field_access  go to state 55


State 107

    8 stmt: . expr ';'
    9     | . PRINT expr ';'
   10     | . return_stmt
   11     | . BREAK ';'
   12     | . CONTINUE ';'
   13     | . var_decl ';'
   14     | . if_stmt
   15     | . while_stmt
   16     | . assignment ';'
   17     | . function
   18     | . class
   19     | . block
   20     | . ';'
   21 return_stmt: . RETURN ';'
   22            | . RETURN expr ';'
   23 block: . '{' stmt_list '}'
   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   47 var_decl: . var_decl ',' var_decl_fragment
   48         | . type var_decl_fragment
   51 assignment: . expr '=' expr
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   60 if_stmt: . IF '(' expr ')' stmt ELSE stmt
   61        | . IF '(' expr ')' stmt
   62 while_stmt: . WHILE '(' expr ')' stmt
   62           | WHILE '(' expr ')' . stmt
   63 function: . DEF ID '(' param_decl_list ')' ret_type block
   64         | . DEF ID '(' ')' ret_type block
   73 class: . CLASS ID '{' class_body '}'
   74      | . CLASS ID ':' name '{' class_body '}'

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    WHILE        shift, and go to state 15
    IF           shift, and go to state 16
    PRINT        shift, and go to state 17
    BREAK        shift, and go to state 18
    DEF          shift, and go to state 19
    CLASS        shift, and go to state 20
    RETURN       shift, and go to state 21
    NEW          shift, and go to state 22
    CONTINUE     shift, and go to state 23
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    ';'          shift, and go to state 32
    '{'          shift, and go to state 33
    '('          shift, and go to state 34

    stmt           go to state 118
    return_stmt    go to state 36
    block          go to state 37
    expr           go to state 38
    simple_name    go to state 39
    field_access   go to state 40
    var_decl       go to state 41
    assignment     go to state 42
    type           go to state 43
    user_def_type  go to state 44
    if_stmt        go to state 45
    while_stmt     go to state 46
    function       go to state 47
    class          go to state 48


State 108

    8 stmt: . expr ';'
    9     | . PRINT expr ';'
   10     | . return_stmt
   11     | . BREAK ';'
   12     | . CONTINUE ';'
   13     | . var_decl ';'
   14     | . if_stmt
   15     | . while_stmt
   16     | . assignment ';'
   17     | . function
   18     | . class
   19     | . block
   20     | . ';'
   21 return_stmt: . RETURN ';'
   22            | . RETURN expr ';'
   23 block: . '{' stmt_list '}'
   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   47 var_decl: . var_decl ',' var_decl_fragment
   48         | . type var_decl_fragment
   51 assignment: . expr '=' expr
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   60 if_stmt: . IF '(' expr ')' stmt ELSE stmt
   60        | IF '(' expr ')' . stmt ELSE stmt
   61        | . IF '(' expr ')' stmt
   61        | IF '(' expr ')' . stmt
   62 while_stmt: . WHILE '(' expr ')' stmt
   63 function: . DEF ID '(' param_decl_list ')' ret_type block
   64         | . DEF ID '(' ')' ret_type block
   73 class: . CLASS ID '{' class_body '}'
   74      | . CLASS ID ':' name '{' class_body '}'

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    WHILE        shift, and go to state 15
    IF           shift, and go to state 16
    PRINT        shift, and go to state 17
    BREAK        shift, and go to state 18
    DEF          shift, and go to state 19
    CLASS        shift, and go to state 20
    RETURN       shift, and go to state 21
    NEW          shift, and go to state 22
    CONTINUE     shift, and go to state 23
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    ';'          shift, and go to state 32
    '{'          shift, and go to state 33
    '('          shift, and go to state 34

    stmt           go to state 119
    return_stmt    go to state 36
    block          go to state 37
    expr           go to state 38
    simple_name    go to state 39
    field_access   go to state 40
    var_decl       go to state 41
    assignment     go to state 42
    type           go to state 43
    user_def_type  go to state 44
    if_stmt        go to state 45
    while_stmt     go to state 46
    function       go to state 47
    class          go to state 48


State 109

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   64 function: DEF ID '(' ')' . ret_type block
   65 ret_type: . type
   66         | . %empty  ['{']

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    NEW          shift, and go to state 22
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    '('          shift, and go to state 34

    $default  reduce using rule 66 (ret_type)

    expr           go to state 110
    simple_name    go to state 39
    field_access   go to state 40
    type           go to state 120
    user_def_type  go to state 44
    ret_type       go to state 121


State 110

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name

    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75


State 111

   68 param_decl_list: type . ID

    ID  shift, and go to state 122


State 112

   63 function: DEF ID '(' param_decl_list . ')' ret_type block
   67 param_decl_list: param_decl_list . ',' type ID

    ')'  shift, and go to state 123
    ','  shift, and go to state 124


State 113

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   47 var_decl: . var_decl ',' var_decl_fragment
   48         | . type var_decl_fragment
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   63 function: . DEF ID '(' param_decl_list ')' ret_type block
   64         | . DEF ID '(' ')' ret_type block
   73 class: . CLASS ID '{' class_body '}'
   73      | CLASS ID '{' class_body . '}'
   74      | . CLASS ID ':' name '{' class_body '}'
   75 class_body: class_body . class_body_decl
   77 class_body_decl: . var_decl ';'
   78                | . function
   79                | . class
   80                | . constructor
   81                | . destructor
   82 constructor: . THIS '(' param_decl_list ')' block
   83 destructor: . '~' THIS '(' ')' block

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    DEF          shift, and go to state 19
    CLASS        shift, and go to state 20
    THIS         shift, and go to state 125
    NEW          shift, and go to state 22
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    '}'          shift, and go to state 126
    '('          shift, and go to state 34
    '~'          shift, and go to state 127

    expr             go to state 110
    simple_name      go to state 39
    field_access     go to state 40
    var_decl         go to state 128
    type             go to state 43
    user_def_type    go to state 44
    function         go to state 129
    class            go to state 130
    class_body_decl  go to state 131
    constructor      go to state 132
    destructor       go to state 133


State 114

   74 class: CLASS ID ':' name . '{' class_body '}'

    '{'  shift, and go to state 134


State 115

   45 field_access: expr '.' simple_name .  [AND, EQ, '<', '+', '-', '*', '/', '.']
   69 call: expr '.' simple_name . '(' param_list ')'

    '('  shift, and go to state 135

    $default  reduce using rule 45 (field_access)


State 116

   70 call: simple_name '(' param_list . ')'
   71 param_list: param_list . ',' expr

    ')'  shift, and go to state 136
    ','  shift, and go to state 137


State 117

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name
   49 var_decl_fragment: ID '=' expr .  [';', ',']

    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75

    $default  reduce using rule 49 (var_decl_fragment)


State 118

   62 while_stmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 62 (while_stmt)


State 119

   60 if_stmt: IF '(' expr ')' stmt . ELSE stmt
   61        | IF '(' expr ')' stmt .  [$end, INT_VAL, CHAR_VAL, STR_VAL, ID, DOUBLE_VAL, WHILE, IF, PRINT, BREAK, DEF, CLASS, RETURN, NEW, CONTINUE, BOOL_TYPE, CHAR_TYPE, STR_TYPE, INT32_TYPE, INT64_TYPE, TRUE, FALSE, DOUBLE_TYPE, ';', '{', '}', '(']

    ELSE  shift, and go to state 138

    $default  reduce using rule 61 (if_stmt)

    Conflict between rule 61 and token ELSE resolved as shift (IFX < ELSE).


State 120

   65 ret_type: type .

    $default  reduce using rule 65 (ret_type)


State 121

   23 block: . '{' stmt_list '}'
   64 function: DEF ID '(' ')' ret_type . block

    '{'  shift, and go to state 33

    block  go to state 139


State 122

   68 param_decl_list: type ID .

    $default  reduce using rule 68 (param_decl_list)


State 123

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   63 function: DEF ID '(' param_decl_list ')' . ret_type block
   65 ret_type: . type
   66         | . %empty  ['{']

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    NEW          shift, and go to state 22
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    '('          shift, and go to state 34

    $default  reduce using rule 66 (ret_type)

    expr           go to state 110
    simple_name    go to state 39
    field_access   go to state 40
    type           go to state 120
    user_def_type  go to state 44
    ret_type       go to state 140


State 124

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   67 param_decl_list: param_decl_list ',' . type ID

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    NEW          shift, and go to state 22
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    '('          shift, and go to state 34

    expr           go to state 110
    simple_name    go to state 39
    field_access   go to state 40
    type           go to state 141
    user_def_type  go to state 44


State 125

   82 constructor: THIS . '(' param_decl_list ')' block

    '('  shift, and go to state 142


State 126

   73 class: CLASS ID '{' class_body '}' .

    $default  reduce using rule 73 (class)


State 127

   83 destructor: '~' . THIS '(' ')' block

    THIS  shift, and go to state 143


State 128

   47 var_decl: var_decl . ',' var_decl_fragment
   77 class_body_decl: var_decl . ';'

    ';'  shift, and go to state 144
    ','  shift, and go to state 78


State 129

   78 class_body_decl: function .

    $default  reduce using rule 78 (class_body_decl)


State 130

   79 class_body_decl: class .

    $default  reduce using rule 79 (class_body_decl)


State 131

   75 class_body: class_body class_body_decl .

    $default  reduce using rule 75 (class_body)


State 132

   80 class_body_decl: constructor .

    $default  reduce using rule 80 (class_body_decl)


State 133

   81 class_body_decl: destructor .

    $default  reduce using rule 81 (class_body_decl)


State 134

   74 class: CLASS ID ':' name '{' . class_body '}'
   75 class_body: . class_body class_body_decl
   76           | . %empty

    $default  reduce using rule 76 (class_body)

    class_body  go to state 145


State 135

   69 call: expr '.' simple_name '(' . param_list ')'
   71 param_list: . param_list ',' expr
   72           | . %empty

    $default  reduce using rule 72 (param_list)

    param_list  go to state 146


State 136

   70 call: simple_name '(' param_list ')' .

    $default  reduce using rule 70 (call)


State 137

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   71 param_list: param_list ',' . expr

    INT_VAL     shift, and go to state 11
    CHAR_VAL    shift, and go to state 12
    STR_VAL     shift, and go to state 13
    ID          shift, and go to state 7
    DOUBLE_VAL  shift, and go to state 14
    NEW         shift, and go to state 22
    TRUE        shift, and go to state 29
    FALSE       shift, and go to state 30
    '('         shift, and go to state 34

    expr          go to state 147
    simple_name   go to state 39
    field_access  go to state 55


State 138

    8 stmt: . expr ';'
    9     | . PRINT expr ';'
   10     | . return_stmt
   11     | . BREAK ';'
   12     | . CONTINUE ';'
   13     | . var_decl ';'
   14     | . if_stmt
   15     | . while_stmt
   16     | . assignment ';'
   17     | . function
   18     | . class
   19     | . block
   20     | . ';'
   21 return_stmt: . RETURN ';'
   22            | . RETURN expr ';'
   23 block: . '{' stmt_list '}'
   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   47 var_decl: . var_decl ',' var_decl_fragment
   48         | . type var_decl_fragment
   51 assignment: . expr '=' expr
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   60 if_stmt: . IF '(' expr ')' stmt ELSE stmt
   60        | IF '(' expr ')' stmt ELSE . stmt
   61        | . IF '(' expr ')' stmt
   62 while_stmt: . WHILE '(' expr ')' stmt
   63 function: . DEF ID '(' param_decl_list ')' ret_type block
   64         | . DEF ID '(' ')' ret_type block
   73 class: . CLASS ID '{' class_body '}'
   74      | . CLASS ID ':' name '{' class_body '}'

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    WHILE        shift, and go to state 15
    IF           shift, and go to state 16
    PRINT        shift, and go to state 17
    BREAK        shift, and go to state 18
    DEF          shift, and go to state 19
    CLASS        shift, and go to state 20
    RETURN       shift, and go to state 21
    NEW          shift, and go to state 22
    CONTINUE     shift, and go to state 23
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    ';'          shift, and go to state 32
    '{'          shift, and go to state 33
    '('          shift, and go to state 34

    stmt           go to state 148
    return_stmt    go to state 36
    block          go to state 37
    expr           go to state 38
    simple_name    go to state 39
    field_access   go to state 40
    var_decl       go to state 41
    assignment     go to state 42
    type           go to state 43
    user_def_type  go to state 44
    if_stmt        go to state 45
    while_stmt     go to state 46
    function       go to state 47
    class          go to state 48


State 139

   64 function: DEF ID '(' ')' ret_type block .

    $default  reduce using rule 64 (function)


State 140

   23 block: . '{' stmt_list '}'
   63 function: DEF ID '(' param_decl_list ')' ret_type . block

    '{'  shift, and go to state 33

    block  go to state 149


State 141

   67 param_decl_list: param_decl_list ',' type . ID

    ID  shift, and go to state 150


State 142

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   67 param_decl_list: . param_decl_list ',' type ID
   68                | . type ID
   82 constructor: THIS '(' . param_decl_list ')' block

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    NEW          shift, and go to state 22
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    '('          shift, and go to state 34

    expr             go to state 110
    simple_name      go to state 39
    field_access     go to state 40
    type             go to state 111
    user_def_type    go to state 44
    param_decl_list  go to state 151


State 143

   83 destructor: '~' THIS . '(' ')' block

    '('  shift, and go to state 152


State 144

   77 class_body_decl: var_decl ';' .

    $default  reduce using rule 77 (class_body_decl)


State 145

   24 expr: . INT_VAL
   25     | . TRUE
   26     | . FALSE
   27     | . STR_VAL
   28     | . CHAR_VAL
   29     | . DOUBLE_VAL
   30     | . expr '+' expr
   31     | . expr '-' expr
   32     | . expr '*' expr
   33     | . expr '/' expr
   34     | . expr '<' expr
   35     | . expr AND expr
   36     | . expr EQ expr
   37     | . '(' expr ')'
   38     | . NEW call
   39     | . field_access
   44 simple_name: . ID
   45 field_access: . expr '.' simple_name
   46             | . simple_name
   47 var_decl: . var_decl ',' var_decl_fragment
   48         | . type var_decl_fragment
   52 type: . INT32_TYPE
   53     | . INT64_TYPE
   54     | . BOOL_TYPE
   55     | . CHAR_TYPE
   56     | . STR_TYPE
   57     | . DOUBLE_TYPE
   58     | . user_def_type
   59 user_def_type: . field_access
   63 function: . DEF ID '(' param_decl_list ')' ret_type block
   64         | . DEF ID '(' ')' ret_type block
   73 class: . CLASS ID '{' class_body '}'
   74      | . CLASS ID ':' name '{' class_body '}'
   74      | CLASS ID ':' name '{' class_body . '}'
   75 class_body: class_body . class_body_decl
   77 class_body_decl: . var_decl ';'
   78                | . function
   79                | . class
   80                | . constructor
   81                | . destructor
   82 constructor: . THIS '(' param_decl_list ')' block
   83 destructor: . '~' THIS '(' ')' block

    INT_VAL      shift, and go to state 11
    CHAR_VAL     shift, and go to state 12
    STR_VAL      shift, and go to state 13
    ID           shift, and go to state 7
    DOUBLE_VAL   shift, and go to state 14
    DEF          shift, and go to state 19
    CLASS        shift, and go to state 20
    THIS         shift, and go to state 125
    NEW          shift, and go to state 22
    BOOL_TYPE    shift, and go to state 24
    CHAR_TYPE    shift, and go to state 25
    STR_TYPE     shift, and go to state 26
    INT32_TYPE   shift, and go to state 27
    INT64_TYPE   shift, and go to state 28
    TRUE         shift, and go to state 29
    FALSE        shift, and go to state 30
    DOUBLE_TYPE  shift, and go to state 31
    '}'          shift, and go to state 153
    '('          shift, and go to state 34
    '~'          shift, and go to state 127

    expr             go to state 110
    simple_name      go to state 39
    field_access     go to state 40
    var_decl         go to state 128
    type             go to state 43
    user_def_type    go to state 44
    function         go to state 129
    class            go to state 130
    class_body_decl  go to state 131
    constructor      go to state 132
    destructor       go to state 133


State 146

   69 call: expr '.' simple_name '(' param_list . ')'
   71 param_list: param_list . ',' expr

    ')'  shift, and go to state 154
    ','  shift, and go to state 137


State 147

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '<' expr
   35     | expr . AND expr
   36     | expr . EQ expr
   45 field_access: expr . '.' simple_name
   71 param_list: param_list ',' expr .  [')', ',']

    AND  shift, and go to state 68
    EQ   shift, and go to state 69
    '<'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '.'  shift, and go to state 75

    $default  reduce using rule 71 (param_list)


State 148

   60 if_stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 60 (if_stmt)


State 149

   63 function: DEF ID '(' param_decl_list ')' ret_type block .

    $default  reduce using rule 63 (function)


State 150

   67 param_decl_list: param_decl_list ',' type ID .

    $default  reduce using rule 67 (param_decl_list)


State 151

   67 param_decl_list: param_decl_list . ',' type ID
   82 constructor: THIS '(' param_decl_list . ')' block

    ')'  shift, and go to state 155
    ','  shift, and go to state 124


State 152

   83 destructor: '~' THIS '(' . ')' block

    ')'  shift, and go to state 156


State 153

   74 class: CLASS ID ':' name '{' class_body '}' .

    $default  reduce using rule 74 (class)


State 154

   69 call: expr '.' simple_name '(' param_list ')' .

    $default  reduce using rule 69 (call)


State 155

   23 block: . '{' stmt_list '}'
   82 constructor: THIS '(' param_decl_list ')' . block

    '{'  shift, and go to state 33

    block  go to state 157


State 156

   23 block: . '{' stmt_list '}'
   83 destructor: '~' THIS '(' ')' . block

    '{'  shift, and go to state 33

    block  go to state 158


State 157

   82 constructor: THIS '(' param_decl_list ')' block .

    $default  reduce using rule 82 (constructor)


State 158

   83 destructor: '~' THIS '(' ')' block .

    $default  reduce using rule 83 (destructor)
